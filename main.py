import datetime
import random
import time
import telebot
import requests as req
from geopy.geocoders import Nominatim
from telebot import types
from bs4 import BeautifulSoup as bs
from googletrans import Translator

# APIs
WeatherApi = "API"
bot = telebot.TeleBot("API")
RIA = 'https://t.me/s/rian_ru'
MASH = 'https://t.me/s/breakingmash'
BBS = 'https://www.telegram.me/s/bbcrussian'

# Weather
weather_emoji = {
    "Clear": "‚òÄ",
    "Clouds": "‚òÅ",
    "Rain": "üåß",
    "Thunderstorm": "üå©",
    "Snow": "üå®Ô∏è",
}

conditions = {
    "Clear": "–Ø—Å–Ω–æ",
    "Clouds": "–û–±–ª–∞—á–Ω–æ",
    "Rain": "–î–æ–∂–¥—å",
    "Thunderstorm": "–ì—Ä–æ–º",
    "Snow": "–°–Ω–µ–≥",
}

loc = None


@bot.message_handler(content_types=["location"])
def location(message):
    if message.location is not None:
        global loc
        loc = (message.location.latitude, message.location.longitude)


def city_search(loc):
    geolocator = Nominatim(user_agent="Tra-bot")
    adr = geolocator.reverse(loc)
    adr = adr.raw['address']
    city = adr.get('city')
    print(city)
    return city


# News
def get_news(ag):
    n = req.get(ag)
    pn = bs(n.text, 'html.parser')
    news = pn.findAll('div', class_="tgme_widget_message_text js-message_text")
    news = [i.text for i in news]
    time = pn.findAll('a', class_="tgme_widget_message_date")
    time = [i.text for i in time]
    nn = random.randint(-1, len(news))
    return (f"{time[nn]}\n"
            f"{news[nn]}.")


# Translate
def translate(text):
    trans = Translator()
    text = trans.translate(str(text), dest='fr')
    return text


# Telegram
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, """–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥:
/weather - –ü–æ–≥–æ–¥–∞.
/news - –ù–æ–≤–æ—Å—Ç–∏.
/translator - –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫.
    """)


@bot.message_handler(commands=['weather'])
def weather(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_geo = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
    keyboard.add(button_geo)
    if loc is None:
        bot.send_message(message.chat.id,
                         "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤—ã–¥–∞—á–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
                         reply_markup=keyboard)
        time.sleep(8)
        while loc is None:
            bot.send_message(message.chat.id,
                             "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤—ã–¥–∞—á–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
                             reply_markup=keyboard)
            time.sleep(8)
    city = city_search(loc)
    r = req.get(
        f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WeatherApi}&units=metric"
    )
    data = r.json()
    temp = data["main"]["temp"]
    humidity = data["main"]["humidity"]
    wind = data["wind"]["speed"]
    sunset = str(datetime.datetime.fromtimestamp((data["sys"]["sunset"])))
    wt = data["weather"][0]["main"]
    if wt in weather_emoji:
        wej = weather_emoji[wt]
        if wt == "Clear" and datetime.datetime.now().hour > int(sunset[11] + sunset[12]):
            wej = "üåï"
    else:
        wej = None
    bot.send_message(message.chat.id, f"–ü–æ–≥–æ–¥–∞ –Ω–∞ {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}\n"
                                      f"{city}.\n"
                                      f"–ü–æ–≥–æ–¥–∞: {conditions[wt]}\n"
                                      f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                                      f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                                      f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind}–º/—Å\n", reply_markup=types.ReplyKeyboardRemove())
    bot.send_message(message.chat.id, wej)


@bot.message_handler(commands=['news'])
def news(message):
    newsRIA = get_news(RIA)
    newsMASH = get_news(MASH)
    newsBBS = get_news(BBS)
    bot.send_message(message.chat.id, f"–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏:\n"
                                      f"{newsRIA}\n"
                                      f"\nMash News:\n"
                                      f"{newsMASH}\n"
                                      f"\nBBS Russia:\n"
                                      f"{newsBBS}")


@bot.message_handler(commands=['translator'])
def translator(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.")

@bot.message_handler()
def st(message):
    text = message.text
    text = translate(text)
    bot.send_message(message.chat.id, text.text)


bot.polling(none_stop=True)